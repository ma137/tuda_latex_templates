name: example documents compilation tests

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  tests:

    strategy:
      fail-fast: false
      matrix:
        container: ["ubuntu:18.04", "ubuntu:20.04", "ubuntu:21.04"]
        
    runs-on: ubuntu-20.04
    container: ${{ matrix.container }}

    steps:
      - uses: actions/checkout@v2
      - run: ls -al
      - name: Install TeXLive from Ubuntu package sources
        run: |
          apt-get update
          DEBIAN_FRONTEND="noninteractive" TZ="Europe/Berlin" apt-get install -y tzdata
          apt-get -y install texlive-latex-recommended
      - name: Create logo file
        run: |
          # echo "\shipout\hbox{}\end" > logo.tex
          # cat logo.tex
          # pdftex logo.tex
          # cp logo.pdf example/tuda_logo.pdf
          # # cp texput.pdf example/tuda_logo.pdf
          apt-get -y install wget
          wget http://mirrors.ctan.org/macros/latex/contrib/tuda-ci/doc/DEMO-TUDaLetter.pdf
          cp DEMO-TUDaLetter.pdf example/tuda_logo.pdf
      - name: Prepare the TUDa-CI template and install it
        run: |
          ./addlicense.sh
          cp tex/* example/
      - name: Do preparations specific for compilation with TeXLive 2019
        run: |
          # sed -i 's/points=true/points=false/g' example/DEMO-TUDaExercise.tex
          cat example/DEMO-TUDaExercise.tex | grep points
      - name: Install additional TeX packages from the Ubuntu package sources
        id: installation_final_step
        run: |
          apt-get -y install texlive-latex-extra texlive-fonts-extra texlive-lang-cyrillic texlive-lang-german texlive-bibtex-extra
          apt-get -y install texlive-publishers # We install this package in order to have urcls installed.
                                              # By doing so we get also an older version of TUDa-CI installed.
                                              # As the cls files etc. in the working directory are considered first by pdfLaTeX,
                                              # this should be no problem.
      - name: Get pdfLaTeX version
        run: pdflatex --version
      - name: Test if example report TeX file can be compiled using pdflatex
        id: pdflatex_report
        run: |
          cd example/
          pdflatex DEMO-TUDaReport.tex
      - name: Test if example exercise TeX file can be compiled using pdflatex
        id: pdflatex_exercise
        run: |
          cd example/
          pdflatex DEMO-TUDaExercise.tex
      - name: Test if example PhD thesis TeX file can be compiled using pdflatex
        id: pdflatex_phd
        run: |
          cd example/
          pdflatex DEMO-TUDaPhD.tex
      - name: Test if example PhD thesis TeX file with english as main language can be compiled using pdflatex
        id: pdflatex_phd_en
        run: |
          cd example/
          sed -i 's/usepackage\[english, main=ngerman\]{babel}/usepackage\[ngerman, main=english\]{babel}/g' DEMO-TUDaPhD.tex
          cat DEMO-TUDaPhD.tex | grep babel
          pdflatex DEMO-TUDaPhD.tex
      - name: Install LuaTex from the Ubuntu package sources
        id: lualatex_installation
        run: apt-get -y install texlive-luatex
        if: always() && steps.installation_final_step.outcome == 'success'
      - name: Test if example report TeX file can be compiled using lualatex
        id: lualatex_report
        run: |
          cd example/
          lualatex DEMO-TUDaReport.tex
        if: always() && steps.lualatex_installation.outcome == 'success'
      - name: Test if example exercise TeX file can be compiled using lualatex
        id: lualatex_exercise
        run: |
          cd example/
          lualatex DEMO-TUDaExercise.tex
        if: always() && steps.lualatex_installation.outcome == 'success'
      - name: Test if example PhD thesis TeX file can be compiled using lualatex
        id: lualatex_phd
        run: |
          cd example/
          sed -i 's/usepackage\[ngerman, main=english\]{babel}/usepackage\[english, main=ngerman\]{babel}/g' DEMO-TUDaPhD.tex
          cat DEMO-TUDaPhD.tex | grep babel
          lualatex DEMO-TUDaPhD.tex
        if: always() && steps.lualatex_installation.outcome == 'success'
      - name: Test if example PhD thesis TeX file with english as main language can be compiled using lualatex
        id: lualatex_phd_en
        run: |
          cd example/
          sed -i 's/usepackage\[english, main=ngerman\]{babel}/usepackage\[ngerman, main=english\]{babel}/g' DEMO-TUDaPhD.tex
          cat DEMO-TUDaPhD.tex | grep babel
          lualatex DEMO-TUDaPhD.tex
        if: always() && steps.lualatex_installation.outcome == 'success'
     
      - name: Create overview of test results
        id: test_overview
        run: |
          version="${{ matrix.container }}"
          fn="tests_results_$( echo $version | sed -e 's/:/_/g' ).md"
          echo "# Overview of tests run on ${{ matrix.container }}" >> $fn
          echo "" >> $fn
          echo "* compile DEMO-TUDaReport.tex using PDFLaTeX: ${{ steps.pdflatex_report.outcome }}" >> $fn
          echo "* compile DEMO-TUDaExercise.tex using PDFLaTeX: ${{ steps.pdflatex_exercise.outcome }}" >> $fn
          echo "* compile DEMO-TUDaPhD.tex using PDFLaTeX: ${{ steps.pdflatex_phd.outcome }}" >> $fn
          echo "* compile DEMO-TUDaPhD.tex using PDFLaTeX (English as main language): ${{ steps.pdflatex_phd_en.outcome }}" >> $fn
          echo "" >> $fn
          echo "* compile DEMO-TUDaReport.tex using LuaLaTeX: ${{ steps.lualatex_report.outcome }}" >> $fn
          echo "* compile DEMO-TUDaExercise.tex using LuaLaTeX: ${{ steps.lualatex_exercise.outcome }}" >> $fn
          echo "* compile DEMO-TUDaPhD.tex using LuaLaTeX: ${{ steps.lualatex_phd.outcome }}" >> $fn
          echo "* compile DEMO-TUDaPhD.tex using LuaLaTeX (English as main language): ${{ steps.lualatex_phd_en.outcome }}" >> $fn
          echo "test_results_filename=$fn" >> $GITHUB_ENV
        if: always() && steps.installation_final_step.outcome == 'success' && steps.lualatex_installation.outcome == 'success'
      - name: Archive overview of test results
        uses: actions/upload-artifact@v2
        with:
          name: test results report
          path: ${{ env.test_results_filename }}
        if: always() && steps.test_overview.outcome == 'success'
